plugins {
    id 'java'
    id 'java-library'
    id 'com.google.protobuf' version '0.9.4' // protobuf 설정을 위한 plugins 추가
    id 'org.springframework.boot' apply(false)
    id 'io.spring.dependency-management'
    id 'io.spring.javaformat' apply(false)
    id 'org.asciidoctor.jvm.convert' apply(false)
}

group = "${projectGroup}.my-proto"
version "${applicationVersion}"

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

bootJar.enabled = false;
jar.enabled = true;

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

sourceSets {
    main {
        proto {
            srcDir 'proto/java'
        }
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.25.3"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.64.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {
                outputSubDir = 'grpc'
            }
        }
    }
}

dependencies {
    implementation 'jakarta.annotation:jakarta.annotation-api:3.0.0' // jarkarta api

    /* for gRPC */
    runtimeOnly "io.grpc:grpc-netty-shaded:${grpcNettyShadedVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcProtobufVersion}"
    implementation "io.grpc:grpc-stub:${grpcProtobufVersion}"

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }
}


tasks.register('replaceJavaxWithJakarta') {
    description = 'Replace javax with jakarta in generated sources'
    doLast {
        def dir = file('build/generated/source/proto/main/grpc') as File // gRPC 소스가 생성된 디렉토리
        if (dir.exists()) {
            dir.eachFileRecurse { file ->
                if (file.name.endsWith('.java')) {
                    // javax를 jakarta로 치환
                    def text = file.text.replaceAll('javax', 'jakarta')
                    file.text = text
                }
            }
        }
    }
}

// Protobuf 파일 생성 후 javax -> jakarta 교체 작업을 수행하도록 설정
tasks.named('generateProto').configure {
    finalizedBy replaceJavaxWithJakarta
}